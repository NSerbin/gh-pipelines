name: docker-build

on:
  workflow_call:
    inputs:
      registry:
        description: 'Select the registry to log in to'
        type: string
        default: "dockerhub"
      docker-tag:
        description: Tag for Docker Image
        type: string
        default: latest
      dockerfile-path:
        description: Path of the dockerfile
        type: string
        default: "Dockerfile"
      build-context:
        description: Context to build Dockerfile
        type: string
        default: "."
      docker-architecture:
        description: Architecture type for Docker Image
        type: string
        default: linux/arm/v7
      repository-name:
        description: Name of the Repository
        type: string
      registry-type:
        description: Name of the Repository
        type: string
        default: "private"
      aws-access:
        description: Setting if will use AWS Credentials or Role
        type: string
        default: "access-keys"
      node-version:    
        description: Setting NODE Version
        type: string
        default: "20"

env:
  DOCKER_TAG: ${{ inputs.docker-tag }}
  DOCKERFILE_PATH: ${{ inputs.dockerfile-path }}
  BUILD_CONTEXT: ${{ inputs.build-context }}
  ARCHITECTURE: ${{ inputs.docker-architecture }}
  REPOSITORY: ${{ inputs.repository-name }}
  

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0
          ref: "${{ github.head_ref || github.ref }}"
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ inputs.dockerfile-path }}/Dockerfile
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0
          ref: "${{ github.head_ref || github.ref }}"
      - name: Export secret as env
        if: ${{ env.secret != 'null' }}
        run: echo "$secret" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
        env: 
          secret: ${{ toJson(secrets) }}          
      - name: Export vars as env
        if: ${{ env.var != 'null' }}
        env:
          var: ${{ toJson(vars) }}
        run: echo "$var" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> .env
      - name: Set registry login variables
        id: registry_login
        run: |
          if [ "${{ inputs.registry }}" == "dockerhub" ]; then
            echo "registry=docker.io" >> $GITHUB_OUTPUT
            echo "username=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.DOCKERHUB_TOKEN }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.registry }}" == "ghcr" ]; then
            echo "registry=ghcr.io" >> $GITHUB_OUTPUT
            echo "username=${{ github.actor }}" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.registry }}" == "gitlab" ]; then
            echo "registry=registry.gitlab.com" >> $GITHUB_OUTPUT
            echo "username=${{ secrets.GITLAB_USERNAME }}" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.GITLAB_PASSWORD }}" >> $GITHUB_OUTPUT
          fi
      - name: Login to the selected registry
        uses: docker/login-action@v3
        if: ${{ inputs.registry != 'ecr' }}
        with:
          registry: ${{ steps.registry_login.outputs.registry }}
          username: ${{ steps.registry_login.outputs.username }}
          password: ${{ steps.registry_login.outputs.password }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm/v7

      ## AMAZON ECR
      - name: Configure AWS credentials with Access Keys
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ inputs.registry == 'ecr' && inputs.aws-access == 'access-keys' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
      - name: Configure AWS credentials with Role
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ inputs.registry == 'ecr' && inputs.aws-access == 'role' }}
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: ${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.REGION }}
          
      - name: Login to Amazon ECR
        if: ${{ inputs.registry == 'ecr' && inputs.registry-type == 'private' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Login to Amazon ECR Public
        if: ${{ inputs.registry == 'ecr' && inputs.registry-type == 'public' }}
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      ### BUILDING & PUSHING
      # - name: Build, tag, and push image to DockerHUB
      #   if: ${{ inputs.registry == 'dockerhub' }}
      #   uses: docker/build-push-action@v5.3.0
      #   with:
      #     context: $BUILD_CONTEXT
      #     file: $DOCKERFILE_PATH
      #     build-args: |
      #       NODE_VERSION=${{github.event.inputs.node_version}}
      #     platforms: $ARCHITECTURE
      #     provenance: false
      #     push: true
      #     tags: |
      #       $REPOSITORY:$DOCKER_TAG
      - name: Build, tag, and push image to DockerHUB
        if: ${{ inputs.registry == 'dockerhub' }}
        uses: docker/build-push-action@v5.3.0
        with:
          context: ${{ inputs.build-context }}
          file: ${{ inputs.dockerfile-path }}/Dockerfile
          build-args: |
            NODE_VERSION=${{ inputs.node-version }}
          platforms: ${{ inputs.docker-architecture }}
          provenance: false
          push: true
          tags: |
            ${{ steps.registry_login.outputs.username }}/${{ inputs.repository-name }}:${{ inputs.docker-tag }}            
      - name: Build, tag, and push image to Github Registry
        if: ${{ inputs.registry == 'ghcr.io' }}
        uses: docker/build-push-action@v5.3.0
        with:
          context: $BUILD_CONTEXT
          file: $DOCKERFILE_PATH
          build-args: |
            NODE_VERSION=${{github.event.inputs.node_version}}
          platforms: $ARCHITECTURE
          provenance: false
          push: true
          tags: |
            ghcr.io/user/app:latest$REPOSITORY:$DOCKER_TAG
      - name: Build, tag, and push image to Gitlab Registry
        if: ${{ inputs.registry == 'gitlab' }}
        uses: docker/build-push-action@v5.3.0
        with:
          context: $BUILD_CONTEXT
          file: $DOCKERFILE_PATH
          build-args: |
            NODE_VERSION=${{github.event.inputs.node_version}}
          platforms: $ARCHITECTURE
          provenance: false
          push: true
          tags: |
            $REPOSITORY:$DOCKER_TAG
